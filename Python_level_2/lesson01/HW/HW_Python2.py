# Урок 1. Работа с сетью, сокеты. Тестирование кода
# 1. Функционал
# Первая часть домашнего задания будет заключаться в реализации простого клиент-серверного взаимодействия по протоколу JIM (JSON instant messaging):
# клиент отправляет запрос серверу;
# сервер отвечает соответствующим кодом результата.
# Клиент и сервер должны быть реализованы в виде отдельных скриптов, содержащих соответствующие функции.
# Функции клиента:
# - сформировать presence-сообщение; 1
# - отправить сообщение серверу; 1
# - получить ответ сервера; 1
# - разобрать сообщение сервера; 1
# - параметры командной строки скрипта client.py <addr> [<port>]: 1
# addr - ip-адрес сервера
# port - tcp-порт на сервере, по умолчанию 7777
# Функции сервера:
# - принимает сообщение клиента; 1
# - формирует ответ клиенту; 1
# - отправляет ответ клиенту; 1
# - имеет параметры командной строки: 1
# -p <port> - TCP-порт для работы (по умолчанию использует порт 7777)
# -a <addr> - IP-адрес для прослушивания (по умолчанию слушает все доступные адреса)
#
# 2. Тесты.
# Для всех функций необходимо написать тесты с использованием doctest (небольшие тесты в документации функций), unittest или py.test (в дальнейшем упор будет делаться на библиотеку py.test). Тесты должны быть оформлены в отдельных скриптах с префиксом test_ в имени файла (например, test_client.py).
#
# 3. Дополнительно
# В качестве практики написания тестов напишите тесты для домашних работ курса Python-1.


###################################

#
# Проект “Мессенджер”
#
# 1. Основное задание:
# Реализовать логгирование с использованием модуля logging:
# Реализовать декоратор @log, фиксирующий обращение к декорируемой функции: сохраняет имя функции и её аргументы.
# Настройку логгера выполнить в отдельном модуле log_config.py:
# Создание именованного логгера.
# Сообщения лога должны иметь следующий формат:
# "<дата-время> <уровеньважности> <имямодуля> <имя_функции> <сообщение>"
# Журналирование должно производиться в лог-файл.
# Реализовать обработку нескольких клиентов на сервере с использованием функции select таким образом, что клиенты общаются в "общем чате", т.е. каждое сообщение каждого клиента отправляется всем клиентам, подключенным к серверу.
# Реализовать функции отправки/приёма данных на стороне клиента. Для упрощения разработки приложения на данном этапе пусть клиентское приложение будет либо только принимать, либо только отправлять сообщения в общий чат:
# запуск скрипта клиента должен осуществляться с параметром командной строки: -r (чтение чата) или -w (передача сообщений в чат).
# Для всех функций необходимо написать тесты.
#
# 2. *Реализовать скрипт, запускающий два клиентских приложения - одно на чтение чата, другое на запись в чат (уместно использовать модуль subprocess).
# Реализовать скрипт, запускающий указанное количество клиентских приложений.
# Для ОС UNIX реализовать обработку выбора ввода данных от пользователя с клавиатуры и чтение из сокета с использованием функции select.
# В декораторе @log реализовать фиксацию функции, из которой была вызвана декорированная функция. Т.е. если имеется код:
#
# @log
# def func_z():
# pass
#
# def main():
# func_z()
#
# То в логе должна быть отражена информация:
#
# "<дата-время> Функция func_z() вызвана из функции main"

